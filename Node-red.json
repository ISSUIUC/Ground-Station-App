[
    {
        "id": "97095cca6f5ef9e5",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a3832ee5d563a633",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "eeca559bffcb1693",
        "type": "tab",
        "label": "Flow 1",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "7118924a2645c141",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.0.101",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "152d9aec61c24f73",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0948613d740142d8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#b51a00",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#b51a00",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#b51a00",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#ff2702",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#b51a00",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "62bb3be8655b6b66",
        "type": "ui_group",
        "name": "Default",
        "tab": "152d9aec61c24f73",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "22f394e5.96b87c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "352010d7.7bdd4",
        "type": "ui_tab",
        "name": "Color Sensor Input",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f7013d7d.5eb85",
        "type": "ui_group",
        "name": "Green",
        "tab": "352010d7.7bdd4",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "b7fc28ec.02cca8",
        "type": "ui_group",
        "name": "blue",
        "tab": "352010d7.7bdd4",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ceeff91c.56a9b8",
        "type": "ui_group",
        "name": "Clear",
        "tab": "352010d7.7bdd4",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "34e8a021.21be4",
        "type": "ui_group",
        "name": "Red",
        "tab": "352010d7.7bdd4",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "40cbfaa6.5d37a4",
        "type": "ui_group",
        "name": "Day chart",
        "tab": "b8b5757d.f38bb8",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "b8b5757d.f38bb8",
        "type": "ui_tab",
        "name": "Raw Telemetry",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "836aeafb.6b2e98",
        "type": "ui_group",
        "name": "IMU",
        "tab": "b8b5757d.f38bb8",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "4b1f5d5c.eddd44",
        "type": "ui_tab",
        "name": "Graphs",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5a4020c2.81e",
        "type": "ui_group",
        "name": "Graphs",
        "tab": "4b1f5d5c.eddd44",
        "order": 1,
        "disp": true,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "78575fdf.e65308",
        "type": "mqtt-broker",
        "name": "",
        "broker": "iot.eclipse.org",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "1424ade0.635bda",
        "type": "mqtt-broker",
        "name": "",
        "broker": "iot.eclipse.org",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "55ef459f.a99114",
        "type": "ui_group",
        "name": "Velocity",
        "tab": "152d9aec61c24f73",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "df73289f.14496",
        "type": "ui_group",
        "name": "Altitude",
        "tab": "152d9aec61c24f73",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "92daa97d.01534",
        "type": "mqtt-broker",
        "name": "",
        "broker": "iot.eclipse.org",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "638e76e3.97a0e",
        "type": "mqtt-broker",
        "name": "android consumer",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": ""
    },
    {
        "id": "98d3277d22e0e89d",
        "type": "ui_group",
        "name": "Acceleration",
        "tab": "152d9aec61c24f73",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3d7dab06e72844d8",
        "type": "ui_group",
        "name": "Voltage",
        "tab": "152d9aec61c24f73",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "69c7e0bf55ba177e",
        "type": "ui_group",
        "name": "Live Telemetry",
        "tab": "152d9aec61c24f73",
        "order": 5,
        "disp": true,
        "width": "3",
        "collapse": false,
        "className": ""
    },
    {
        "id": "46a8ac65.d0f114",
        "type": "google-cloud-credentials",
        "name": "IOTFI Credentials"
    },
    {
        "id": "71b170cd.61afd",
        "type": "google-cloud-credentials",
        "name": "iotfi"
    },
    {
        "id": "94b2215f.4694",
        "type": "bigquery-config"
    },
    {
        "id": "7bb06799207e019f",
        "type": "ui_group",
        "name": "Pyro status",
        "tab": "152d9aec61c24f73",
        "order": 2,
        "disp": true,
        "width": "3",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6b9d9bbc1fd214eb",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8c640478d6d4c488",
        "type": "ui_tab",
        "name": "Cesium",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a63c67f9e98dd78f",
        "type": "ui_group",
        "name": "Default",
        "tab": "8c640478d6d4c488",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false
    },
    {
        "id": "1076b87f78fc0f6a",
        "type": "ui_tab",
        "name": "Map",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "652e051b84ea7265",
        "type": "ui_group",
        "name": "Default",
        "tab": "1076b87f78fc0f6a",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false
    },
    {
        "id": "ca2272c3.e8396",
        "type": "ui_group",
        "name": "Video",
        "tab": "e38483790572b1bc",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "55b13b02706b1c82",
        "type": "ui_group",
        "name": "Live Video",
        "tab": "152d9aec61c24f73",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e38483790572b1bc",
        "type": "ui_tab",
        "name": "Live Video",
        "icon": "fa-video-camera",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "46103d1fccd0b18f",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#ff2600",
                "baseFont": "Verdana,Verdana,Geneva,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#ff2600",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#ff2600",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#ff674d",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#ff2600",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "Verdana,Verdana,Geneva,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "deep-orange",
                "accents": "light-blue",
                "warn": "red",
                "background": "grey",
                "palette": "dark"
            }
        },
        "site": {
            "name": "Illinois Space Society",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "c2571e362a60f9e0",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#ff2600",
                "baseFont": "Verdana,Verdana,Geneva,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#ff2600",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#ff2600",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#ff674d",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#ff2600",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "Verdana,Verdana,Geneva,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "deep-orange",
                "accents": "light-blue",
                "warn": "red",
                "background": "grey",
                "palette": "dark"
            }
        },
        "site": {
            "name": "Illinois Space Society",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "867723775990be41",
        "type": "mqtt in",
        "z": "97095cca6f5ef9e5",
        "name": "",
        "topic": "Flightdata",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "22f394e5.96b87c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 80,
        "y": 180,
        "wires": [
            [
                "c22b25a8224aaa57",
                "ac80dfc4f84e6025",
                "e02435ad29d95b16",
                "3ddcbfedd9bacf62",
                "e16e414e9f57ce1b",
                "8b33b022aa9bc7ab",
                "b1fba2b5dc767290",
                "ca7d4cd395f4333b",
                "fcbd46ed2e2ae0a5",
                "d9201c9b5b8d1421",
                "37d430d77ebe47e6"
            ]
        ]
    },
    {
        "id": "ac80dfc4f84e6025",
        "type": "debug",
        "z": "97095cca6f5ef9e5",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 120,
        "wires": []
    },
    {
        "id": "c22b25a8224aaa57",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "GPS Altitude",
        "func": "// Assuming msg.payload is the provided object\nconst param_decode = [\"gps_alt\"];\nconst output_context = \"altitude\"\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.type === \"data\" && msg.payload.value) {\n    let new_payload = {};\n    param_decode.forEach((param) => {\n        if(typeof msg.payload.value[param] === \"undefined\") {\n            msg.payload = \"Error: Missing params\";\n            return msg;\n        } else {\n            new_payload[param] = msg.payload.value[param];\n        }\n    });\n    \n    if(param_decode.length == 1) {\n        // Simple case, if only 1 param\n        new_payload = new_payload[param_decode[0]];\n    } \n\n    // Context to allow for multiple inputs down the line\n    msg.payload = {context: output_context, data: new_payload};\n    \n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"Error: Invalid payload structure\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 180,
        "wires": [
            [
                "eac137389a822602"
            ]
        ]
    },
    {
        "id": "eac137389a822602",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Clean Float",
        "func": "// Returns a properly formatted float (:.1f), 1 decimal precision\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.data && isNumber(msg.payload.data)) {\n    // Round to nearest tenth\n    msg.payload = Math.round(msg.payload.data * 10) / 10;\n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "bc39ef2483029a19",
        "type": "ui_gauge",
        "z": "97095cca6f5ef9e5",
        "name": "",
        "group": "69c7e0bf55ba177e",
        "order": 0,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "Altitude",
        "label": "ft",
        "format": "{{value}}",
        "min": 0,
        "max": "45000",
        "colors": [
            "#800000",
            "#ff0000",
            "#ff8080"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1100,
        "y": 240,
        "wires": []
    },
    {
        "id": "e02435ad29d95b16",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Pressure",
        "func": "// Assuming msg.payload is the provided object\nconst param_decode = [\"pressure\"];\nconst output_context = \"pressure\"\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.type === \"data\" && msg.payload.value) {\n    let new_payload = {};\n    param_decode.forEach((param) => {\n        if(typeof msg.payload.value[param] === \"undefined\") {\n            msg.payload = \"Error: Missing params\";\n            return msg;\n        } else {\n            new_payload[param] = msg.payload.value[param];\n        }\n    });\n    \n    if(param_decode.length == 1) {\n        // Simple case, if only 1 param\n        new_payload = new_payload[param_decode[0]];\n    } \n\n    // Context to allow for multiple inputs down the line\n    msg.payload = {context: output_context, data: new_payload};\n    \n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"Error: Invalid payload structure\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 240,
        "wires": [
            [
                "91b1df22502e9cc4"
            ]
        ]
    },
    {
        "id": "960e562150673092",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Clean Float",
        "func": "// Returns a properly formatted float (:.1f), 1 decimal precision\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.data && isNumber(msg.payload.data)) {\n    // Round to nearest tenth\n    msg.payload = Math.round(msg.payload.data * 10) / 10;\n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 240,
        "wires": [
            [
                "bc39ef2483029a19"
            ]
        ]
    },
    {
        "id": "91b1df22502e9cc4",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Baro Alt",
        "func": "// Store state\ncontext.temperature = context.temperature || 0.0;\ncontext.pressure = context.pressure || 0.0;\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.context && msg.payload.data && isNumber(msg.payload.data)) {\n\n  // Decode inputs\n  if (msg.payload.context === \"pressure\") {\n    context.pressure = msg.payload.data\n  }\n\n  if (msg.payload.context === \"temperature\") {\n    context.temperature = msg.payload.data\n  }\n\n  // msg.payload = context.temperature;\n  let alt = -Math.log(context.pressure * 0.000987) * (context.temperature + 273.15) * 29.254;\n  msg.payload = {context: \"barometric_alt\", data: alt};\n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 240,
        "wires": [
            [
                "960e562150673092",
                "d065e7e98dc6840d"
            ]
        ]
    },
    {
        "id": "3ddcbfedd9bacf62",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Temperature",
        "func": "// Assuming msg.payload is the provided object\nconst param_decode = [\"TEMP\"];\nconst output_context = \"temperature\"\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.type === \"data\" && msg.payload.value) {\n    let new_payload = {};\n    param_decode.forEach((param) => {\n        if(typeof msg.payload.value[param] === \"undefined\") {\n            msg.payload = \"Error: Missing params\";\n            return msg;\n        } else {\n            new_payload[param] = msg.payload.value[param];\n        }\n    });\n    \n    if(param_decode.length == 1) {\n        // Simple case, if only 1 param\n        new_payload = new_payload[param_decode[0]];\n    } \n\n    // Context to allow for multiple inputs down the line\n    msg.payload = {context: output_context, data: new_payload};\n    \n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"Error: Invalid payload structure\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 300,
        "wires": [
            [
                "91b1df22502e9cc4"
            ]
        ]
    },
    {
        "id": "e16e414e9f57ce1b",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Velocity",
        "func": "// Assuming msg.payload is the provided object\nconst param_decode = [\"STE_VEL\"];\nconst output_context = \"velocity\"\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.type === \"data\" && msg.payload.value) {\n    let new_payload = {};\n    param_decode.forEach((param) => {\n        if(typeof msg.payload.value[param] === \"undefined\") {\n            msg.payload = \"Error: Missing params\";\n            return msg;\n        } else {\n            new_payload[param] = msg.payload.value[param];\n        }\n    });\n    \n    if(param_decode.length == 1) {\n        // Simple case, if only 1 param\n        new_payload = new_payload[param_decode[0]];\n    } \n\n    // Context to allow for multiple inputs down the line\n    msg.payload = {context: output_context, data: new_payload};\n    \n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"Error: Invalid payload structure\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 420,
        "wires": [
            [
                "ca9d6370c02863b9",
                "c2f93c2c7be8e33c"
            ]
        ]
    },
    {
        "id": "ca9d6370c02863b9",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Clean Float",
        "func": "// Returns a properly formatted float (:.1f), 1 decimal precision\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.data && isNumber(msg.payload.data)) {\n    // Round to nearest tenth\n    msg.payload = Math.round(msg.payload.data * 10) / 10;\n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 420,
        "wires": [
            [
                "b3c78bf7856b83f1"
            ]
        ]
    },
    {
        "id": "b3c78bf7856b83f1",
        "type": "ui_gauge",
        "z": "97095cca6f5ef9e5",
        "name": "",
        "group": "69c7e0bf55ba177e",
        "order": 0,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "Velocity",
        "label": "m/s",
        "format": "{{value}}",
        "min": "-1",
        "max": "1",
        "colors": [
            "#800000",
            "#ff0000",
            "#ff8080"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1100,
        "y": 420,
        "wires": []
    },
    {
        "id": "8b33b022aa9bc7ab",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Yaw",
        "func": "// Assuming msg.payload is the provided object\nconst param_decode = [\"BNO_YAW\"];\nconst output_context = \"yaw\"\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.type === \"data\" && msg.payload.value) {\n    let new_payload = {};\n    param_decode.forEach((param) => {\n        if(typeof msg.payload.value[param] === \"undefined\") {\n            msg.payload = \"Error: Missing params\";\n            return msg;\n        } else {\n            new_payload[param] = msg.payload.value[param];\n        }\n    });\n    \n    if(param_decode.length == 1) {\n        // Simple case, if only 1 param\n        new_payload = new_payload[param_decode[0]];\n    } \n\n    // Context to allow for multiple inputs down the line\n    msg.payload = {context: output_context, data: new_payload};\n    \n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"Error: Invalid payload structure\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 520,
        "wires": [
            [
                "45447eec9596f9e9"
            ]
        ]
    },
    {
        "id": "b1fba2b5dc767290",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Pitch",
        "func": "// Assuming msg.payload is the provided object\nconst param_decode = [\"BNO_PITCH\"];\nconst output_context = \"pitch\"\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.type === \"data\" && msg.payload.value) {\n    let new_payload = {};\n    param_decode.forEach((param) => {\n        if(typeof msg.payload.value[param] === \"undefined\") {\n            msg.payload = \"Error: Missing params\";\n            return msg;\n        } else {\n            new_payload[param] = msg.payload.value[param];\n        }\n    });\n    \n    if(param_decode.length == 1) {\n        // Simple case, if only 1 param\n        new_payload = new_payload[param_decode[0]];\n    } \n\n    // Context to allow for multiple inputs down the line\n    msg.payload = {context: output_context, data: new_payload};\n    \n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"Error: Invalid payload structure\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 560,
        "wires": [
            [
                "45447eec9596f9e9"
            ]
        ]
    },
    {
        "id": "ca7d4cd395f4333b",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Roll",
        "func": "// Assuming msg.payload is the provided object\nconst param_decode = [\"BNO_ROLL\"];\nconst output_context = \"roll\"\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.type === \"data\" && msg.payload.value) {\n    let new_payload = {};\n    param_decode.forEach((param) => {\n        if(typeof msg.payload.value[param] === \"undefined\") {\n            msg.payload = \"Error: Missing params\";\n            return msg;\n        } else {\n            new_payload[param] = msg.payload.value[param];\n        }\n    });\n    \n    if(param_decode.length == 1) {\n        // Simple case, if only 1 param\n        new_payload = new_payload[param_decode[0]];\n    } \n\n    // Context to allow for multiple inputs down the line\n    msg.payload = {context: output_context, data: new_payload};\n    \n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"Error: Invalid payload structure\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 600,
        "wires": [
            [
                "45447eec9596f9e9"
            ]
        ]
    },
    {
        "id": "45447eec9596f9e9",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Angle",
        "func": "// Store state\ncontext.yaw = context.yaw || 0.0;\ncontext.pitch = context.pitch || 0.0;\ncontext.roll = context.roll || 0.0;\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.context && msg.payload.data && isNumber(msg.payload.data)) {\n\n  // Decode inputs\n  if (msg.payload.context === \"yaw\") {\n    context.yaw = msg.payload.data\n  }\n\n  if (msg.payload.context === \"pitch\") {\n    context.pitch = msg.payload.data\n  }\n\n  if (msg.payload.context === \"roll\") {\n    context.roll = msg.payload.data\n  }\n\n  // msg.payload = context.temperature;\n  // let angle = context.pitch**2 + context.yaw**2;\n  // this is wrong, we should fix it!\n  let angles = [context.pitch, context.yaw];\n  let alpha = (Math.abs(context.pitch) > Math.abs(context.yaw)) ? context.pitch : context.yaw;\n\n  let angle = 57.2958 * alpha;\n  msg.payload = {context: \"angle\", data: angle};\n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 560,
        "wires": [
            [
                "143d402411ea4bc5"
            ]
        ]
    },
    {
        "id": "143d402411ea4bc5",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Clean Float",
        "func": "// Returns a properly formatted float (:.1f), 1 decimal precision\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.data && isNumber(msg.payload.data)) {\n    // Round to nearest tenth\n    msg.payload = Math.round(msg.payload.data * 10) / 10;\n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 560,
        "wires": [
            [
                "d8c19635cecc0d02"
            ]
        ]
    },
    {
        "id": "d8c19635cecc0d02",
        "type": "ui_gauge",
        "z": "97095cca6f5ef9e5",
        "name": "",
        "group": "69c7e0bf55ba177e",
        "order": 0,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "Tilt Angle",
        "label": "",
        "format": "{{value}}°",
        "min": "-90",
        "max": "90",
        "colors": [
            "#ff0000",
            "#ff8080",
            "#ff0000"
        ],
        "seg1": "",
        "seg2": "",
        "diff": true,
        "className": "",
        "x": 1100,
        "y": 560,
        "wires": []
    },
    {
        "id": "fcbd46ed2e2ae0a5",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "RSSI",
        "func": "// Assuming msg.payload is the provided object\nconst param_decode = [\"RSSI\"];\nconst output_context = \"rssi\"\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.type === \"data\" && msg.payload.value) {\n    let new_payload = {};\n    param_decode.forEach((param) => {\n        if(typeof msg.payload.value[param] === \"undefined\") {\n            msg.payload = \"Error: Missing params\";\n            return msg;\n        } else {\n            new_payload[param] = msg.payload.value[param];\n        }\n    });\n    \n    if(param_decode.length == 1) {\n        // Simple case, if only 1 param\n        new_payload = new_payload[param_decode[0]];\n    } \n\n    // Context to allow for multiple inputs down the line\n    msg.payload = {context: output_context, data: new_payload};\n    \n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"Error: Invalid payload structure\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 700,
        "wires": [
            [
                "c5683f7012cd3a14"
            ]
        ]
    },
    {
        "id": "c5683f7012cd3a14",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Connection",
        "func": "// Store state\ncontext.rssi = context.rssi || -999.0;\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.context && msg.payload.data && isNumber(msg.payload.data)) {\n\n  // Decode inputs\n  if (msg.payload.context === \"rssi\") {\n    context.rssi = msg.payload.data * 150\n  }\n\n  let connection = \"NONE\";\n  let color = \"#bf0d00\";\n  if(context.rssi > -140) {\n    connection = \"WEAK\";\n    color = \"#ff9e03\";\n  }\n\n  if(context.rssi > -80) {\n    connection = \"OK\";\n    color = \"#ffff03\";\n  }\n\n  if(context.rssi > -55) {\n    connection = \"GOOD\";\n    color = \"#a7ff4f\";\n  }\n\n  if(context.rssi > -30) {\n    connection = \"STRONG\";\n    color = \"#3dff03\";\n  }\n\n  msg.color = color;\n  \n  msg.payload = connection;\n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 700,
        "wires": [
            [
                "447ca5471a5cf79d"
            ]
        ]
    },
    {
        "id": "447ca5471a5cf79d",
        "type": "ui_text",
        "z": "97095cca6f5ef9e5",
        "group": "69c7e0bf55ba177e",
        "order": 0,
        "width": "3",
        "height": "2",
        "name": "",
        "label": "Connection",
        "format": "<font color='{{msg.color}}'>{{msg.payload}}</font>",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1110,
        "y": 700,
        "wires": []
    },
    {
        "id": "d9201c9b5b8d1421",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Pyro",
        "func": "// Assuming msg.payload is the provided object\nconst param_decode = [\"Pyro1\", \"Pyro2\", \"Pyro3\", \"Pyro4\",\n \"Pyro1Firing\", \"Pyro2Firing\", \"Pyro3Firing\", \"Pyro4Firing\",\n \"Continuity1\", \"Continuity2\", \"Continuity3\", \"Continuity4\"];\nconst output_context = \"pyro\"\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.type === \"data\" && msg.payload.value) {\n    let new_payload = {};\n    param_decode.forEach((param) => {\n        if(typeof msg.payload.value[param] === \"undefined\") {\n            msg.payload = \"Error: Missing params\";\n            return msg;\n        } else {\n            new_payload[param] = msg.payload.value[param];\n        }\n    });\n    \n    if(param_decode.length == 1) {\n        // Simple case, if only 1 param\n        new_payload = new_payload[param_decode[0]];\n    } \n\n    // Context to allow for multiple inputs down the line\n    msg.payload = {context: output_context, data: new_payload};\n    \n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"Error: Invalid payload structure\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 800,
        "wires": [
            [
                "9236ddb7dba5e3e6",
                "c6dc7e5e82c8b06d",
                "88ca0c7604eac3ce",
                "78c6af78ad335e2c"
            ]
        ]
    },
    {
        "id": "9236ddb7dba5e3e6",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Pyro1",
        "func": "// Store state\ncontext.pyrostate = context.pyrostate || null;\nconst pyro_num = 1;\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.context && msg.payload.data) {\n\n  // Decode inputs\n  if (msg.payload.context === \"pyro\") {\n    context.pyrostate = msg.payload.data\n  }\n\n  let this_pyrostate = {pyro: context.pyrostate[`Pyro${pyro_num}`],\n                        continuity: context.pyrostate[`Continuity${pyro_num}`],\n                        firing: context.pyrostate[`Pyro${pyro_num}Firing`]}\n  \n  msg.payload = {context: `single_pyro`, data: this_pyrostate};\n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 800,
        "wires": [
            [
                "149dbb7438ed47c8"
            ]
        ]
    },
    {
        "id": "bf9b35e85e77ae4b",
        "type": "ui_text",
        "z": "97095cca6f5ef9e5",
        "group": "7bb06799207e019f",
        "order": 0,
        "width": "3",
        "height": "2",
        "name": "",
        "label": "Pyro 1",
        "format": "<font color='{{msg.payload.color}}'>{{msg.payload.st}} ({{msg.payload.v}}V)</font>",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1090,
        "y": 800,
        "wires": []
    },
    {
        "id": "149dbb7438ed47c8",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Pyro Decode",
        "func": "// Store state\ncontext.pyrostate = context.pyrostate || null;\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.context && msg.payload.data) {\n\n  // Decode inputs\n  if (msg.payload.context === \"single_pyro\") {\n    context.pyrostate = msg.payload.data\n  }\n\n  let pyro_status = \"OPEN\";\n  let color = \"red\";\n\n\n  if(context.pyrostate.continuity > 0.5) {\n    pyro_status = \"READY\";\n    color = \"lime\";\n  } \n  \n  msg.payload = {color: color, st: pyro_status, v: context.pyrostate.continuity.toFixed(1), f: context.pyrostate.firing};\n  \n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 800,
        "wires": [
            [
                "bf9b35e85e77ae4b"
            ]
        ]
    },
    {
        "id": "c6dc7e5e82c8b06d",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Pyro2",
        "func": "// Store state\ncontext.pyrostate = context.pyrostate || null;\nconst pyro_num = 2;\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.context && msg.payload.data) {\n\n  // Decode inputs\n  if (msg.payload.context === \"pyro\") {\n    context.pyrostate = msg.payload.data\n  }\n\n  let this_pyrostate = {pyro: context.pyrostate[`Pyro${pyro_num}`],\n                        continuity: context.pyrostate[`Continuity${pyro_num}`],\n                        firing: context.pyrostate[`Pyro${pyro_num}Firing`]}\n  \n  msg.payload = {context: `single_pyro`, data: this_pyrostate};\n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 860,
        "wires": [
            [
                "01cb81b597516349"
            ]
        ]
    },
    {
        "id": "88ca0c7604eac3ce",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Pyro3",
        "func": "// Store state\ncontext.pyrostate = context.pyrostate || null;\nconst pyro_num = 3;\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.context && msg.payload.data) {\n\n  // Decode inputs\n  if (msg.payload.context === \"pyro\") {\n    context.pyrostate = msg.payload.data\n  }\n\n  let this_pyrostate = {pyro: context.pyrostate[`Pyro${pyro_num}`],\n                        continuity: context.pyrostate[`Continuity${pyro_num}`],\n                        firing: context.pyrostate[`Pyro${pyro_num}Firing`]}\n  \n  msg.payload = {context: `single_pyro`, data: this_pyrostate};\n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 920,
        "wires": [
            [
                "d3fde95ff5e1bbbc"
            ]
        ]
    },
    {
        "id": "78c6af78ad335e2c",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Pyro4",
        "func": "// Store state\ncontext.pyrostate = context.pyrostate || null;\nconst pyro_num = 4;\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.context && msg.payload.data) {\n\n  // Decode inputs\n  if (msg.payload.context === \"pyro\") {\n    context.pyrostate = msg.payload.data\n  }\n\n  let this_pyrostate = {pyro: context.pyrostate[`Pyro${pyro_num}`],\n                        continuity: context.pyrostate[`Continuity${pyro_num}`],\n                        firing: context.pyrostate[`Pyro${pyro_num}Firing`]}\n  \n  msg.payload = {context: `single_pyro`, data: this_pyrostate};\n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 980,
        "wires": [
            [
                "735cf9a71be68667"
            ]
        ]
    },
    {
        "id": "01cb81b597516349",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Pyro Decode",
        "func": "// Store state\ncontext.pyrostate = context.pyrostate || null;\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.context && msg.payload.data) {\n\n  // Decode inputs\n  if (msg.payload.context === \"single_pyro\") {\n    context.pyrostate = msg.payload.data\n  }\n\n  let pyro_status = \"OPEN\";\n  let color = \"red\";\n\n\n  if(context.pyrostate.continuity > 0.5) {\n    pyro_status = \"READY\";\n    color = \"lime\";\n  } \n  \n  msg.payload = {color: color, st: pyro_status, v: context.pyrostate.continuity.toFixed(1), f: context.pyrostate.firing};\n  \n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 860,
        "wires": [
            [
                "203c9dd1f35dfe35"
            ]
        ]
    },
    {
        "id": "d3fde95ff5e1bbbc",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Pyro Decode",
        "func": "// Store state\ncontext.pyrostate = context.pyrostate || null;\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.context && msg.payload.data) {\n\n  // Decode inputs\n  if (msg.payload.context === \"single_pyro\") {\n    context.pyrostate = msg.payload.data\n  }\n\n  let pyro_status = \"OPEN\";\n  let color = \"red\";\n\n\n  if(context.pyrostate.continuity > 0.5) {\n    pyro_status = \"READY\";\n    color = \"lime\";\n  } \n  \n  msg.payload = {color: color, st: pyro_status, v: context.pyrostate.continuity.toFixed(1), f: context.pyrostate.firing};\n  \n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 920,
        "wires": [
            [
                "36f8c062ecf109cf"
            ]
        ]
    },
    {
        "id": "735cf9a71be68667",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Pyro Decode",
        "func": "// Store state\ncontext.pyrostate = context.pyrostate || null;\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.context && msg.payload.data) {\n\n  // Decode inputs\n  if (msg.payload.context === \"single_pyro\") {\n    context.pyrostate = msg.payload.data\n  }\n\n  let pyro_status = \"OPEN\";\n  let color = \"red\";\n\n\n  if(context.pyrostate.continuity > 0.5) {\n    pyro_status = \"READY\";\n    color = \"lime\";\n  } \n  \n  msg.payload = {color: color, st: pyro_status, v: context.pyrostate.continuity.toFixed(1), f: context.pyrostate.firing};\n  \n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 980,
        "wires": [
            [
                "6d41a50a1a005798"
            ]
        ]
    },
    {
        "id": "203c9dd1f35dfe35",
        "type": "ui_text",
        "z": "97095cca6f5ef9e5",
        "group": "7bb06799207e019f",
        "order": 0,
        "width": "3",
        "height": "2",
        "name": "",
        "label": "Pyro 2",
        "format": "<font color='{{msg.payload.color}}'>{{msg.payload.st}} ({{msg.payload.v}}V)</font>",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1090,
        "y": 860,
        "wires": []
    },
    {
        "id": "36f8c062ecf109cf",
        "type": "ui_text",
        "z": "97095cca6f5ef9e5",
        "group": "7bb06799207e019f",
        "order": 0,
        "width": "3",
        "height": "2",
        "name": "",
        "label": "Pyro 3",
        "format": "<font color='{{msg.payload.color}}'>{{msg.payload.st}} ({{msg.payload.v}}V)</font>",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1090,
        "y": 920,
        "wires": []
    },
    {
        "id": "6d41a50a1a005798",
        "type": "ui_text",
        "z": "97095cca6f5ef9e5",
        "group": "7bb06799207e019f",
        "order": 0,
        "width": "3",
        "height": "2",
        "name": "",
        "label": "Pyro 4",
        "format": "<font color='{{msg.payload.color}}'>{{msg.payload.st}} ({{msg.payload.v}}V)</font>",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1090,
        "y": 980,
        "wires": []
    },
    {
        "id": "37d430d77ebe47e6",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "FSM",
        "func": "// Assuming msg.payload is the provided object\nconst param_decode = [\"FSM_state\"];\nconst output_context = \"fsm\"\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.type === \"data\" && msg.payload.value) {\n    let new_payload = {};\n    param_decode.forEach((param) => {\n        if(typeof msg.payload.value[param] === \"undefined\") {\n            msg.payload = \"Error: Missing params\";\n            return msg;\n        } else {\n            new_payload[param] = msg.payload.value[param];\n        }\n    });\n    \n    if(param_decode.length == 1) {\n        // Simple case, if only 1 param\n        new_payload = new_payload[param_decode[0]];\n    } \n\n    // Context to allow for multiple inputs down the line\n    msg.payload = {context: output_context, data: new_payload};\n    \n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"Error: Invalid payload structure\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1080,
        "wires": [
            [
                "d8e6993c6546c057"
            ]
        ]
    },
    {
        "id": "1178e4f828bd9e78",
        "type": "ui_template",
        "z": "97095cca6f5ef9e5",
        "group": "ca2272c3.e8396",
        "name": "cesium",
        "order": 0,
        "width": "10",
        "height": "9",
        "format": "<iframe src=\"http://192.168.0.69:5001/\" style=\"width:100%; height:100%;\"></iframe>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 520,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "d8e6993c6546c057",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "FSM Decode",
        "func": "// Store state\ncontext.fsmstate = context.fsmstate || null;\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\nconst fsm_states = [\n    \"IDLE\",     // STATE_IDLE\n    \"FIRST STAGE BOOST\",  // STATE_FIRST_BOOST\n    \"FIRST STAGE BURNOUT\", // STATE_BURNOUT\n    \"COASTING\", // STATE_COAST\n    \"ACHIEVED APOGEE\", // STATE_APOGEE\n    \"ATTEMPTING DROGUE DEPLOY\", // STATE_DROGUE_DEPLOY\n    \"DROGUE DEPLOY CONFIRMED\", // STATE_DROGUE\n    \"ATTEMPTING MAIN DEPLOY\", // STATE_MAIN_DEPLOY\n    \"MAIN DEPLOY CONFIRMED\", // STATE_MAIN\n    \"LANDED\", // STATE_LANDED\n    \"ATTEMPTING SUSTAINER IGNITION\", // STATE_SUSTAINER_IGNITION\n    \"SECOND STAGE BOOST\", // STATE_SECOND_BOOST\n];\nconst flavor_text = \"State update: \" \n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.context && msg.payload.data) {\n\n  // Decode inputs\n  if (msg.payload.context === \"fsm\") {\n    context.fsmstate = msg.payload.data\n  }\n  \n  let state = Math.floor(context.fsmstate);\n  let display_state = fsm_states[state] ? fsm_states[state] : \"NO FSM DATA\"\n  \n  msg.payload.data = display_state\n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1080,
        "wires": [
            [
                "98ad34a809215979"
            ]
        ]
    },
    {
        "id": "98ad34a809215979",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Notification push",
        "func": "// Store state\ncontext.state = context.state || \"NO STATE DATA\";\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.context && msg.payload.data) {\n\n  // Decode inputs\n  if(context.state !== msg.payload.data) {\n    context.state = msg.payload.data;\n    msg.payload = context.state;\n    return msg;\n  }\n  msg.payload = \"\";\n  return msg;\n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1080,
        "wires": [
            [
                "a61f2864cca1160e"
            ]
        ]
    },
    {
        "id": "958d30c1fc32acc7",
        "type": "ui_toast",
        "z": "97095cca6f5ef9e5",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "FSM State Update",
        "name": "",
        "x": 1120,
        "y": 1080,
        "wires": []
    },
    {
        "id": "a61f2864cca1160e",
        "type": "switch",
        "z": "97095cca6f5ef9e5",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 930,
        "y": 1080,
        "wires": [
            [
                "958d30c1fc32acc7"
            ]
        ]
    },
    {
        "id": "bf155ba88336211d",
        "type": "ui_chart",
        "z": "97095cca6f5ef9e5",
        "name": "",
        "group": "5a4020c2.81e",
        "order": 0,
        "width": "7",
        "height": "5",
        "label": "Altitude over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1290,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "9ea9a37985fcd63c",
        "type": "ui_button",
        "z": "97095cca6f5ef9e5",
        "name": "",
        "group": "ca2272c3.e8396",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Full Screen",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-tv",
        "payload": "redirect",
        "payloadType": "str",
        "topic": "fs",
        "topicType": "msg",
        "x": 690,
        "y": 120,
        "wires": [
            [
                "b7aacb938d9f9307"
            ]
        ]
    },
    {
        "id": "f1a23952bca72074",
        "type": "ui_template",
        "z": "97095cca6f5ef9e5",
        "group": "ca2272c3.e8396",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<script>\n(function(scope) {\n    scope.$watch('msg.payload', function(data) {\n        if(data === \"redirect\") {\n          // console.log(\"AAAA\", data);\n          window.location.href = \"http://192.168.0.69:5001/video_feed\";\n        }\n    });\n})(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1020,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b7aacb938d9f9307",
        "type": "trigger",
        "z": "97095cca6f5ef9e5",
        "name": "reset msg",
        "op1": "",
        "op2": "empty",
        "op1type": "pay",
        "op2type": "str",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 860,
        "y": 120,
        "wires": [
            [
                "f1a23952bca72074"
            ]
        ]
    },
    {
        "id": "d065e7e98dc6840d",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Pass-thru",
        "func": "const enable_context = \"enable_graph\"\n\n// Store state\ncontext.is_enabled = context.is_enabled || false;\ncontext.passthru_data = context.passthru_data || {};\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.context) {\n\n  // Decode inputs\n  if (msg.payload.context === enable_context) {\n    context.is_enabled = msg.payload.data;\n  } else {\n    context.passthru_data = msg.payload.data;\n  }\n\n  if(context.is_enabled) {\n    msg.payload = context.passthru_data;\n  } else {\n    msg.payload = null;\n  }\n\n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR DEC\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 300,
        "wires": [
            [
                "3bb361bf4aadc121"
            ]
        ]
    },
    {
        "id": "954b99f22c5618f0",
        "type": "link in",
        "z": "97095cca6f5ef9e5",
        "name": "link in 1",
        "links": [
            "f2dc6c1da6e5a2f2"
        ],
        "x": 495,
        "y": 360,
        "wires": [
            [
                "c2f93c2c7be8e33c"
            ]
        ]
    },
    {
        "id": "3bb361bf4aadc121",
        "type": "switch",
        "z": "97095cca6f5ef9e5",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 950,
        "y": 300,
        "wires": [
            [
                "bf155ba88336211d"
            ]
        ]
    },
    {
        "id": "c2f93c2c7be8e33c",
        "type": "function",
        "z": "97095cca6f5ef9e5",
        "name": "Pass-thru",
        "func": "const enable_context = \"enable_graph\"\n\n// Store state\ncontext.is_enabled = context.is_enabled || false;\ncontext.passthru_data = context.passthru_data || {};\n\n// Check if msg.payload exists and has the required properties\nif (msg.payload && msg.payload.context) {\n\n  // Decode inputs\n  if (msg.payload.context === enable_context) {\n    context.is_enabled = msg.payload.data;\n  } else {\n    context.passthru_data = msg.payload.data;\n  }\n\n  if(context.is_enabled) {\n    msg.payload = context.passthru_data;\n  } else {\n    msg.payload = null;\n  }\n\n} else {\n    // Handle the case where the required properties are missing\n    msg.payload = \"ERR DEC\";\n}\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 360,
        "wires": [
            [
                "bc61b424a530bc07"
            ]
        ]
    },
    {
        "id": "bc61b424a530bc07",
        "type": "switch",
        "z": "97095cca6f5ef9e5",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 950,
        "y": 360,
        "wires": [
            [
                "a8e35e7782310a9c"
            ]
        ]
    },
    {
        "id": "a8e35e7782310a9c",
        "type": "ui_chart",
        "z": "97095cca6f5ef9e5",
        "name": "",
        "group": "5a4020c2.81e",
        "order": 0,
        "width": "7",
        "height": "5",
        "label": "Velocity over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1290,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "83641986cb34363d",
        "type": "mqtt in",
        "z": "97095cca6f5ef9e5",
        "name": "",
        "topic": "Flightdata",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "22f394e5.96b87c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "b5faea71e6e69eb2",
        "type": "link in",
        "z": "97095cca6f5ef9e5",
        "name": "link in 2",
        "links": [
            "f2dc6c1da6e5a2f2"
        ],
        "x": 495,
        "y": 300,
        "wires": [
            [
                "d065e7e98dc6840d"
            ]
        ]
    },
    {
        "id": "54ed8139e3f0d2cb",
        "type": "link in",
        "z": "97095cca6f5ef9e5",
        "name": "link in 3",
        "links": [
            "a0cc86e0b50faa78"
        ],
        "x": 1135,
        "y": 340,
        "wires": [
            [
                "bf155ba88336211d",
                "a8e35e7782310a9c"
            ]
        ]
    },
    {
        "id": "7dcfe20c6c94d4cf",
        "type": "inject",
        "z": "a3832ee5d563a633",
        "name": "ENABLE GRAPHS",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"data\":true,\"context\":\"enable_graph\"}",
        "payloadType": "json",
        "x": 230,
        "y": 180,
        "wires": [
            [
                "f2dc6c1da6e5a2f2",
                "ce9a21b3062f0f54",
                "eac46414ffdab55a"
            ]
        ]
    },
    {
        "id": "f2dc6c1da6e5a2f2",
        "type": "link out",
        "z": "a3832ee5d563a633",
        "name": "Enable graph",
        "mode": "link",
        "links": [
            "954b99f22c5618f0",
            "b5faea71e6e69eb2"
        ],
        "x": 425,
        "y": 240,
        "wires": []
    },
    {
        "id": "3e3b420f57252746",
        "type": "inject",
        "z": "a3832ee5d563a633",
        "name": "DISABLE GRAPHS",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"data\":false,\"context\":\"enable_graph\"}",
        "payloadType": "json",
        "x": 230,
        "y": 240,
        "wires": [
            [
                "f2dc6c1da6e5a2f2",
                "b459043870f3a96e"
            ]
        ]
    },
    {
        "id": "ce9a21b3062f0f54",
        "type": "change",
        "z": "a3832ee5d563a633",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Navigate to Home > Graphs to view graph data.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 180,
        "wires": [
            [
                "381b4b8ca49815e1"
            ]
        ]
    },
    {
        "id": "381b4b8ca49815e1",
        "type": "ui_toast",
        "z": "a3832ee5d563a633",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Graphs enabled!",
        "name": "",
        "x": 880,
        "y": 180,
        "wires": []
    },
    {
        "id": "c2bed5ab7421610c",
        "type": "inject",
        "z": "a3832ee5d563a633",
        "name": "CLEAR GRAPHS",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 220,
        "y": 360,
        "wires": [
            [
                "a0cc86e0b50faa78",
                "80cb8b3145aa36bb"
            ]
        ]
    },
    {
        "id": "a0cc86e0b50faa78",
        "type": "link out",
        "z": "a3832ee5d563a633",
        "name": "Clear Graph",
        "mode": "link",
        "links": [
            "54ed8139e3f0d2cb"
        ],
        "x": 425,
        "y": 360,
        "wires": []
    },
    {
        "id": "80cb8b3145aa36bb",
        "type": "change",
        "z": "a3832ee5d563a633",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Graph data has been cleared",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 420,
        "wires": [
            [
                "49db7c9c2cba3ffb"
            ]
        ]
    },
    {
        "id": "49db7c9c2cba3ffb",
        "type": "ui_toast",
        "z": "a3832ee5d563a633",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 640,
        "y": 420,
        "wires": []
    },
    {
        "id": "9e1f1c17c61ed4b2",
        "type": "ui_text",
        "z": "a3832ee5d563a633",
        "group": "5a4020c2.81e",
        "order": 2,
        "width": "14",
        "height": "1",
        "name": "",
        "label": "Graph System Status:",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "8",
        "color": "#ffffff",
        "x": 880,
        "y": 240,
        "wires": []
    },
    {
        "id": "eac46414ffdab55a",
        "type": "change",
        "z": "a3832ee5d563a633",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Enabled",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 240,
        "wires": [
            [
                "9e1f1c17c61ed4b2"
            ]
        ]
    },
    {
        "id": "b459043870f3a96e",
        "type": "change",
        "z": "a3832ee5d563a633",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Disabled",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 320,
        "wires": [
            [
                "9e1f1c17c61ed4b2"
            ]
        ]
    },
    {
        "id": "985d4f7a2e7729b7",
        "type": "mqtt in",
        "z": "eeca559bffcb1693",
        "name": "",
        "topic": "Flightdata",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6b9d9bbc1fd214eb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 80,
        "wires": [
            [
                "e217cf4e0fb0584a",
                "095ab046bf1efb4a",
                "908109236ba8ea58"
            ]
        ]
    },
    {
        "id": "e217cf4e0fb0584a",
        "type": "debug",
        "z": "eeca559bffcb1693",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 60,
        "wires": []
    },
    {
        "id": "601e4f0c5637fe03",
        "type": "mqtt out",
        "z": "eeca559bffcb1693",
        "name": "",
        "topic": "Flightdata",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "6b9d9bbc1fd214eb",
        "x": 360,
        "y": 140,
        "wires": []
    },
    {
        "id": "d286210c62dc0fe7",
        "type": "inject",
        "z": "eeca559bffcb1693",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"data\",\"value\":{\"IMU_mx\":-0.06279172292408176,\"IMU_my\":0.9980266527163617,\"IMU_mz\":-0.06266781304821456,\"IMU_gx\":-0.06279172292408176,\"IMU_gy\":0.9980266527163617,\"IMU_gz\":-0.06266781304821456,\"KX_IMU_ax\":-0.06279172292408176,\"KX_IMU_ay\":0.9980266527163617,\"KX_IMU_az\":-0.06266781304821456,\"gps_lat\":51.774210208277076,\"gps_long\":-86.57143697334729,\"gps_alt\":102600,\"STE_ALT\":-0.06279172292408176,\"STE_VEL\":0.9980266527163617,\"STE_ACC\":-0.06266781304821456,\"STE_APO\":-0.12533562609642912,\"BNO_YAW\":0,\"BNO_PITCH\":0,\"BNO_ROLL\":0,\"RSSI\":-0.06279172292408176,\"sign\":\"qxqxlol\",\"FSM_state\":14.200000000000001,\"Voltage\":-0.06279172292408176,\"TEMP\":-0.06279172292408176,\"frequency\":-0.06279172292408176,\"flap_extension\":-15.894239021328087,\"pressure\":918,\"time\":\"771230\"}}",
        "payloadType": "json",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "601e4f0c5637fe03"
            ]
        ]
    },
    {
        "id": "8f8cf8513ee24d73",
        "type": "ui_template",
        "z": "eeca559bffcb1693",
        "group": "a63c67f9e98dd78f",
        "name": "cesium",
        "order": 0,
        "width": "0",
        "height": "0",
        "format": "<iframe src=\"http://10.192.154.230:8080\" style=\"width:100%; height:400px;\"></iframe>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 340,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "095ab046bf1efb4a",
        "type": "function",
        "z": "eeca559bffcb1693",
        "name": "function 1",
        "func": "// Extract GPS coordinates\nvar gpsLat = msg.payload.value.gps_lat;\nvar gpsLong = msg.payload.value.gps_long;\n\n// Set the coordinates for the world map node\nmsg.payload = {\n    \"name\": \"Joe\",\n    \"lat\": gpsLat,\n    \"lon\": gpsLong\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 240,
        "wires": [
            [
                "7aaeb6391aa32b87",
                "8f8cf8513ee24d73"
            ]
        ]
    },
    {
        "id": "7aaeb6391aa32b87",
        "type": "ui_worldmap",
        "z": "eeca559bffcb1693",
        "group": "652e051b84ea7265",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "OSM",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "true",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "true",
        "coords": "deg",
        "showgrid": "false",
        "path": "/worldmap",
        "x": 500,
        "y": 300,
        "wires": []
    },
    {
        "id": "7d70e30d8b5eedbb",
        "type": "ui_template",
        "z": "eeca559bffcb1693",
        "group": "a63c67f9e98dd78f",
        "name": "window redirect",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<script>\n(function(scope) {\n    scope.$watch('msg.payload', function(data) {\n        if (data == \"Node-RED\") {\n          //window.open(\"https://www.nodered.org\");\n          window.location.href = \"https://www.nodered.org\";\n        } \n        if (data == \"GitHub\") {\n          //window.open(\"https://github.com/node-red\");\n          window.location.href = \"http://10.192.154.230:8080\";\n        } \n    });\n})(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 520,
        "y": 360,
        "wires": [
            [
                "798081d8327b5c53"
            ]
        ]
    },
    {
        "id": "55a3557e7d59b833",
        "type": "ui_button",
        "z": "eeca559bffcb1693",
        "name": "",
        "group": "a63c67f9e98dd78f",
        "order": 2,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "Full Screen",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "GitHub",
        "payloadType": "str",
        "topic": "",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "60ddd85be4af344a"
            ]
        ]
    },
    {
        "id": "60ddd85be4af344a",
        "type": "trigger",
        "z": "eeca559bffcb1693",
        "name": "reset msg",
        "op1": "",
        "op2": "empty",
        "op1type": "pay",
        "op2type": "str",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 320,
        "y": 340,
        "wires": [
            [
                "7d70e30d8b5eedbb"
            ]
        ]
    },
    {
        "id": "798081d8327b5c53",
        "type": "debug",
        "z": "eeca559bffcb1693",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 440,
        "wires": []
    },
    {
        "id": "5c158814d06f5052",
        "type": "ui_toast",
        "z": "eeca559bffcb1693",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 410,
        "y": 480,
        "wires": []
    },
    {
        "id": "908109236ba8ea58",
        "type": "function",
        "z": "eeca559bffcb1693",
        "name": "function 2",
        "func": "// Extract GPS coordinates\nvar gpsLat = msg.payload.value.gps_lat;\nvar gpsLong = msg.payload.value.gps_long;\n\n// Set the coordinates for the world map node\nmsg.payload = \"Coast\";\nmsg.topic = \"FSM State Changed\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 280,
        "wires": [
            [
                "5c158814d06f5052"
            ]
        ]
    }
]